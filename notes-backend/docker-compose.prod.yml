# ================================
# PRODUCTION DOCKER COMPOSE
# ================================
version: '3.8'

services:
  # ================================
  # DATABASE SERVICES
  # ================================
  postgres-primary:
    image: postgres:15-alpine
    container_name: notes-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: notes
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-manage}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_statement=mod
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d notes"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - notes-network

  # ================================
  # REDIS CACHE
  # ================================
  redis:
    image: redis:7-alpine
    container_name: notes-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - notes-network

  # ================================
  # APPLICATION
  # ================================
  notes-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: notes-backend-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://postgres-primary:5432/notes
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-manage}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-secretkeykjsdfb4u7Ewty8rg54789yt4578fh374wtg3ubfwi3ut3478bfyuyt6}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      
      # Application Settings
      SPRING_PROFILES_ACTIVE: prod
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Performance Tuning
      JAVA_OPTS: >
        -server
        -Xms512m
        -Xmx1024m
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -XX:+UseStringDeduplication
        -Djava.security.egd=file:/dev/./urandom
        
      # Monitoring
      ENVIRONMENT: production
      APP_VERSION: ${APP_VERSION:-1.0.0}
      
    volumes:
      - ./logs:/var/log/notes-backend
      - ./uploads:/app/uploads
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - notes-network

  # ================================
  # MONITORING STACK
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: notes-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - notes-network

  grafana:
    image: grafana/grafana:latest
    container_name: notes-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - notes-network

  # ================================
  # NGINX REVERSE PROXY
  # ================================
  nginx:
    image: nginx:alpine
    container_name: notes-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - notes-backend
    networks:
      - notes-network

# ================================
# VOLUMES
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ================================
# NETWORKS
# ================================
networks:
  notes-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
