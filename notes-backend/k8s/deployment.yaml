# ================================
# KUBERNETES DEPLOYMENT CONFIGURATION
# ================================

apiVersion: v1
kind: Namespace
metadata:
  name: notes-backend
  labels:
    name: notes-backend

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: notes-backend-config
  namespace: notes-backend
data:
  application.properties: |
    spring.profiles.active=prod
    spring.application.name=notes-backend
    management.endpoints.web.exposure.include=health,info,metrics,prometheus
    management.endpoint.health.show-details=when-authorized
    logging.level.com.project.notes_backend=INFO
    logging.level.root=WARN

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: notes-backend-secrets
  namespace: notes-backend
type: Opaque
data:
  database-url: amRiYzpwb3N0Z3Jlc3FsOi8vcG9zdGdyZXM6NTQzMi9ub3Rlcw==  # base64 encoded
  database-username: cG9zdGdyZXM=  # base64 encoded
  database-password: bWFuYWdl  # base64 encoded
  jwt-secret: c2VjcmV0a2V5a2pzZGZiNHU3RXd0eThyZzU0Nzg5eXQ0NTc4ZmgzNzR3dGczdWJmd2kzdXQzNDc4YmZ5dXl0Ng==  # base64 encoded

---
# Deployment for Notes Backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notes-backend
  namespace: notes-backend
  labels:
    app: notes-backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: notes-backend
  template:
    metadata:
      labels:
        app: notes-backend
    spec:
      containers:
      - name: notes-backend
        image: your-registry/notes-backend:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: notes-backend-secrets
              key: database-url
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: notes-backend-secrets
              key: database-username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: notes-backend-secrets
              key: database-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: notes-backend-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: logs-volume
          mountPath: /var/log/notes-backend
      volumes:
      - name: config-volume
        configMap:
          name: notes-backend-config
      - name: logs-volume
        emptyDir: {}

---
# Service for Notes Backend
apiVersion: v1
kind: Service
metadata:
  name: notes-backend-service
  namespace: notes-backend
  labels:
    app: notes-backend
spec:
  selector:
    app: notes-backend
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: notes-backend-hpa
  namespace: notes-backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: notes-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: notes-backend-ingress
  namespace: notes-backend
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.your-domain.com
    secretName: notes-backend-tls
  rules:
  - host: api.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: notes-backend-service
            port:
              number: 80

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: notes-backend-netpol
  namespace: notes-backend
spec:
  podSelector:
    matchLabels:
      app: notes-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis
    ports:
    - protocol: TCP
      port: 6379
